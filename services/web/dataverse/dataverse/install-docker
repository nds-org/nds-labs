#!/usr/bin/perl

#
# Simplified startup script for Docker containers
# Silent install reads from environment, no prompts
# Assumes R and Postgres in separate containers
# Always CentOS (OS known)
# War file already copied to domain in Dockerfile

use strict;
use warnings;
use Getopt::Long;
use Socket;
use File::Copy;

my @CONFIG_VARIABLES = (
    'HOST_DNS_ADDRESS',
    'GLASSFISH_DIRECTORY',
    'MAIL_SERVER',

    'POSTGRES_SERVER',
    'POSTGRES_PORT',
    'POSTGRES_DATABASE',
    'POSTGRES_USER',
    'POSTGRES_PASSWORD',

    'RSERVE_HOST',
    'RSERVE_PORT',
    'RSERVE_USER',
    'RSERVE_PASSWORD'
);


my %CONFIG_DEFAULTS = (
    'HOST_DNS_ADDRESS',    'localhost',
    'GLASSFISH_DIRECTORY', '/usr/local/glassfish4',
    'MAIL_SERVER',         '',
    'POSTGRES_SERVER',   'localhost',
    'POSTGRES_PORT',     5432,
    'POSTGRES_DATABASE', 'dvndb',
    'POSTGRES_USER',     'dvnapp',
    'POSTGRES_PASSWORD', 'secret',
    'RSERVE_HOST',     'localhost',
    'RSERVE_PORT',     6311,
    'RSERVE_USER',     'rserve',
    'RSERVE_PASSWORD', 'rserve'
); 


# Supported Postgres JDBC drivers:
my %POSTGRES_DRIVERS = (
    "8_4", "postgresql-8.4-703.jdbc4.jar",
    "9_0", "postgresql-9.0-802.jdbc4.jar",
    "9_1", "postgresql-9.1-902.jdbc4.jar",
    "9_2", "postgresql-9.1-902.jdbc4.jar",
    "9_3", "postgresql-9.1-902.jdbc4.jar"
);

# user -- must be root:
my $user_real = `who am i`;
chop $user_real;
$user_real =~ s/ .*$//;

if ( $< != 0 ) {
    print STDERR "\nERROR: You must be logged in as root to run the installer.\n\n";
    exit 1;
}


# Config always from ENV
for my $ENTRY (@CONFIG_VARIABLES) {
    $CONFIG_DEFAULTS{$ENTRY} = $ENV{$ENTRY};
}


# Check mail server is accessible
my ( $mail_server_iaddr, $mail_server__paddr, $mail_server_proto, $mail_server_status );

$mail_server_status = 1;

unless ( $mail_server_iaddr = inet_aton( $CONFIG_DEFAULTS{'MAIL_SERVER'} ) ) {
    print STDERR "Could not look up $CONFIG_DEFAULTS{'MAIL_SERVER'},\n";
    print STDERR "the host you specified as your mail server\n";
    $mail_server_status = 0;
}

if ($mail_server_status) {
    my $mail_server_paddr = sockaddr_in( 25, $mail_server_iaddr );
    $mail_server_proto = getprotobyname('tcp');

    unless ( socket( SOCK, PF_INET, SOCK_STREAM, $mail_server_proto )
        && connect( SOCK, $mail_server_paddr ) )
    {
        print STDERR "Could not establish connection to $CONFIG_DEFAULTS{'MAIL_SERVER'},\n";
        print STDERR "the address you provided for your Mail server.\n";
        print STDERR "Please select a valid mail server, and try again.\n\n";

        $mail_server_status = 0;
    }
    close(SOCK);
}



# check the working (installer) dir:
my $cwd;
chomp( $cwd = `pwd` );

# Create SQL reference data
my $SQL_REFERENCE_DATA     = "reference_data_filtered.sql";
my $SQL_REFERENCE_TEMPLATE = "../database/reference_data.sql";

unless ( -f $SQL_REFERENCE_TEMPLATE ) {
    $SQL_REFERENCE_TEMPLATE = "reference_data.sql";
}

unless ( -f $SQL_REFERENCE_TEMPLATE ) {
    print "\nWARNING: Can't find .sql data template!\n";
    print "(are you running the installer in the right directory?)\n";

    exit 0;
}

open DATATEMPLATEIN, $SQL_REFERENCE_TEMPLATE   || die $@;
open SQLDATAOUT,     '>' . $SQL_REFERENCE_DATA || die $@;

while (<DATATEMPLATEIN>) {
    s/dvnapp/$CONFIG_DEFAULTS{'POSTGRES_USER'}/g;
    print SQLDATAOUT $_;
}

close DATATEMPLATEIN;
close SQLDATAOUT;


# Check Postgres and jq availability
my $psql_exec;
my $jq_exec = "";
my $pg_major_version = 0;
my $pg_minor_version = 0;

my $sys_path = $ENV{'PATH'};
my @sys_path_dirs = split( ":", $sys_path );

$psql_exec = "";

for my $sys_path_dir (@sys_path_dirs) {
    if ( -x $sys_path_dir . "/psql" ) {
        $psql_exec = $sys_path_dir;
        last;
    }
}

for my $sys_path_dir (@sys_path_dirs) {
    if ( -x $sys_path_dir . "/jq" ) {
        $jq_exec = $sys_path_dir;
        last;
    }
}
if ( $jq_exec eq "" ) {
    print STDERR "\nERROR: I haven't been able to find the jq command in your PATH! Please install it from http://stedolan.github.io/jq/\n";
    exit 1;
}

my $psql_major_version = 0;
my $psql_minor_version = 0;

unless ( $psql_exec eq "" ) {
    open( PSQLOUT, $psql_exec . "/psql --version|" );

    my $psql_version_line = <PSQLOUT>;
    chop $psql_version_line;
    close PSQLOUT;

    my ( $postgresName, $postgresNameLong, $postgresVersion ) = split( " ", $psql_version_line );

    unless ( $postgresName eq "psql" && $postgresVersion =~ /^[0-9][0-9\.]*$/ ) {
        print STDERR "\nWARNING: Unexpected output from psql command!\n";
    }
    else {
        my (@psql_version_tokens) = split( '\.', $postgresVersion );

        $psql_major_version = $psql_version_tokens[0];
        $psql_minor_version = $psql_version_tokens[1];

        $pg_major_version = $psql_major_version;
        $pg_minor_version = $psql_minor_version;
    }
}

if ( $psql_exec eq "" ) {
   print STDERR "\nERROR: I haven't been able to find the psql command in your PATH!\n";
    print STDERR "Please make sure PostgresQL is properly installed; if necessary, add\n";
    print STDERR "the location of psql to the PATH, then try again.\n\n";

    exit 1;
}


print "Using psql version " . $pg_major_version . "." . $pg_minor_version . "\n";


# Check if we can connect 

if ( system( $psql_exec . "/psql -U postgres -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -p " . $CONFIG_DEFAULTS{'POSTGRES_PORT'} . " -c 'SELECT * FROM pg_roles' > /dev/null 2>&1" ) == 0 ) {
   print "Connected to postgres on " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . ":" . $CONFIG_DEFAULTS{'POSTGRES_PORT'} . "\n";
}

# 4c. CHECK IF THIS DB ALREADY EXISTS:

my $psql_command_dbcheck =
  $psql_exec . "/psql -U postgres -h " . $CONFIG_DEFAULTS{'POSTGRES_SERVER'} . " -p " . $CONFIG_DEFAULTS{'POSTGRES_PORT'} . " -c \"\" -d " . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . ">/dev/null 2>&1";

if ( ( my $exitcode = system($psql_command_dbcheck) ) == 0 ) {

    print " Database " . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} . " already exists!\n";
}
exit 1;
#
## 4d. CHECK IF THIS USER ALREADY EXISTS:
#
#my $psql_command_rolecheck =
#  $psql_exec . "/psql -c \"\" -d postgres " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . " >/dev/null 2>&1";
#if ( ( my $exitcode = system($psql_command_rolecheck) ) == 0 ) {
#    print "User (role) " . $CONFIG_DEFAULTS{'POSTGRES_USER'} . " already exists;\n";
#    print "Proceeding.";
#}
#else {
#    # 4e. CREATE DVN DB USER:
#
#    print "\nCreating Postgres user (role) for the DVN:\n";
#
#    open TMPCMD, ">/tmp/pgcmd.$$.tmp";
#
#    # with md5-encrypted password:
#    my $pg_password_md5 =
#      &create_pg_hash( $CONFIG_DEFAULTS{'POSTGRES_USER'}, $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'} );
#    my $sql_command =
#        "CREATE ROLE \""
#      . $CONFIG_DEFAULTS{'POSTGRES_USER'}
#      . "\" PASSWORD 'md5"
#      . $pg_password_md5
#      . "' NOSUPERUSER CREATEDB CREATEROLE INHERIT LOGIN";
#
#    print TMPCMD $sql_command;
#    close TMPCMD;
#
#    my $psql_commandline = $psql_exec . "/psql -f /tmp/pgcmd.$$.tmp >/dev/null 2>&1";
#
#    my $out      = qx($psql_commandline 2>&1);
#    my $exitcode = $?;
#    unless ( $exitcode == 0 ) {
#        print STDERR "Could not create the DVN Postgres user role!\n";
#        print STDERR "(SQL: " . $sql_command . ")\n";
#        print STDERR "(psql exit code: " . $exitcode . ")\n";
#        print STDERR "(STDERR and STDOUT was: " . $out . ")\n";
#        exit 1;
#    }
#
#    unlink "/tmp/pgcmd.$$.tmp";
#    print "done.\n";
#}
#
## 4f. CREATE DVN DB:
#
#print "\nCreating Postgres database:\n";
#
#my $psql_command =
#    $psql_exec
#  . "/createdb "
#  . $CONFIG_DEFAULTS{'POSTGRES_DATABASE'}
#  . " --owner="
#  . $CONFIG_DEFAULTS{'POSTGRES_USER'};
#
#my $out      = qx($psql_command 2>&1);
#my $exitcode = $?;
#unless ( $exitcode == 0 ) {
#    print STDERR "Could not create Postgres database for the DVN app!\n";
#    print STDERR "(command: " . $psql_command . ")\n";
#    print STDERR "(psql exit code: " . $exitcode . ")\n";
#    print STDERR "(STDOUT and STDERR: " . $out . ")\n";
#    if ($force) {
#        print STDERR "\n--force called, continuing\n";
#    }
#    else {
#        print STDERR "\naborting the installation (sorry!)\n\n";
#        exit 1;
#    }
#}
#
#
## 5. CONFIGURE GLASSFISH
#
#print "\nProceeding with the Glassfish setup.\n";
#print "\nChecking your Glassfish installation...";
#
#my $glassfish_dir = $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'};
#
## 5a. CHECK IF GLASSFISH DIR LOOKS OK:
#
#unless ( -d $glassfish_dir . "/glassfish/domains/domain1" ) {
#
#    while ( !( -d $glassfish_dir . "/glassfish/domains/domain1" ) ) {
#        print "\nInvalid Glassfish directory " . $glassfish_dir . "!\n";
#        print "Enter the root directory of your Glassfish installation:\n";
#        print "(Or ctrl-C to exit the installer): ";
#
#        $glassfish_dir = <>;
#        chop $glassfish_dir;
#    }
#}
#
#print "OK!\n";
#
## 5b. DETERMINE HOW MUCH MEMORY TO GIVE TO GLASSFISH AS HEAP:
#
#my $gf_heap_default = "2048m";
#my $sys_mem_total   = 0;
#
#if ( -e "/proc/meminfo" && open MEMINFO, "/proc/meminfo" ) {
#    # Linux
#
#    while ( my $mline = <MEMINFO> ) {
#        if ( $mline =~ /MemTotal:[ \t]*([0-9]*) kB/ ) {
#            $sys_mem_total = $1;
#        }
#    }
#
#    close MEMINFO;
#
#}
#
#if ( $sys_mem_total > 0 ) {
#    # setting the default heap size limit to 3/8 of the available
#    # amount of memory:
#    $gf_heap_default = ( int( $sys_mem_total / ( 8 / 3 * 1024 ) ) );
#
#    print "\nSetting the heap limit for Glassfish to " . $gf_heap_default . "MB. \n";
#    print "You may need to adjust this setting to better suit \n";
#    print "your system.\n\n";
#
#    #$gf_heap_default .= "m";
#
#}
#else {
#    print "\nCould not determine the amount of memory on your system.\n";
#    print "Setting the heap limit for Glassfish to 2GB. You may need \n";
#    print "to  adjust the value to better suit your system.\n\n";
#}
#
#push @CONFIG_VARIABLES, "DEF_MEM_SIZE";
#$CONFIG_DEFAULTS{"DEF_MEM_SIZE"} = $gf_heap_default;
#
## TODO:
## if the system has more than 4GB of memory (I believe), glassfish must
## be run with the 64 bit flag set explicitly (at least that was the case
## with the MacOS glassfish build...). Verify, and if still the case,
## add a check.
#
#print "\nInstalling the Glassfish PostgresQL driver... ";
#
#my $install_driver_jar = "";
#
#$install_driver_jar = $POSTGRES_DRIVERS{ $pg_major_version . "_" . $pg_minor_version };
#
#unless ( $install_driver_jar && -e "pgdriver/" . $install_driver_jar ) {
#    die "Installer could not find POSTGRES JDBC driver for your version of PostgresQL!\n("
#      . $pg_major_version . "."
#      . $pg_minor_version . ")";
#
#}
#
#system( "/bin/cp", "pgdriver/" . $install_driver_jar, $glassfish_dir . "/glassfish/lib" );
## more diagnostics needed?
#
#print "done!\n";
#
#
## No need for asadmin password, done in Dockerfile
#
#my $javacheck = `java -version`;
#my $exitcode  = $?;
#unless ( $exitcode == 0 ) {
#    print STDERR "$javacheck\n" if $javacheck;
#    print STDERR "Do you have java installed?\n";
#    exit 1;
#}
#my $DOMAIN = "domain1";
#my $DOMAIN_DOWN =
#  `$CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'}/bin/asadmin list-domains | grep "$DOMAIN " | grep "not running"`;
#print STDERR $DOMAIN_DOWN . "\n";
#if ($DOMAIN_DOWN) {
#    print "Trying to start domain up...\n";
#    system( $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'} . "/bin/asadmin start-domain domain1" );
#}
#else {
#    print "domain appears to be up...\n";
#}

### create asadmin login, so that the user doesn't have to enter
## the username and password for every asadmin command, if
## access to :4848 is password-protected:
#
#system( $glassfish_dir. "/bin/asadmin login" );
#
## NEW: configure glassfish using ASADMIN commands:
#
#my $success = &setup_glassfish();
#
## CHECK EXIT STATUS, BARF IF SETUP SCRIPT FAILED:
#
#unless ($success) {
#    print "\nERROR! Failed to configure Glassfish domain!\n";
#    print "(see the error messages above - if any)\n";
#    print "Aborting...\n";
#
#    exit 1;
#}
#
## Additional config files:
#
#my $JHOVE_CONFIG = "../../conf/jhove/jhove.conf";
#
#unless ( -f $JHOVE_CONFIG ) {
#    $JHOVE_CONFIG = "jhove.conf";
#}
#
#unless ( -f $JHOVE_CONFIG ) {
#    print "\nERROR! Configuration files not found in config dir!\n";
#    print "(are you running the installer in the right directory?\n";
#    print "Aborting...\n";
#    exit 1;
#}
#
#print "\nCopying additional configuration files... ";
#
#system( "/bin/cp -Rf " . $JHOVE_CONFIG . " " . $glassfish_dir . "/glassfish/domains/domain1/config" );
##diagnostics needed!
#
## install the DVN guides (HTML) into the application docroot:
## (if the built docs exist?)
## TODO: add documentation build/installation to the installer.
##system ( "/bin/cp -Rf doc/guides/* ".$glassfish_dir."/glassfish/domains/domain1/docroot/guides");
#
#print "done!\n";
#
## check if glassfish is running:
## TODO.
#
## 6. DEPLOY APPLICATION:
## War file already deployed
#
#print "Waiting for the dataverse application to start...\n";
#sleep 60;
#
## 7. POPULATE DATABASE:
#
## CAW need to do this
##    # 7b. INSTRUCT THE USER TO POPULATE THE DB ON THE REMOTE SERVER:
##    # NOT SUPPORTED YET -- TODO
##    print "Please copy the file $SQL_REFERENCE_DATA (found in this directory)\n";
##    print "onto the remote server and populate the database manually,\n";
##    print "as user postgres, with the following command:\n\n";
##    print "   psql -d $CONFIG_DEFAULTS{'POSTGRES_DATABASE'} -f $SQL_REFERENCE_DATA\n";
##    print "then start glassfish again on this server with \n\n";
##    print "   " . $glassfish_dir . "/bin/asadmin start-domain domain1\n\n";
##
##    exit 0;
##
#
## back to root:
#
#chdir($cwd);
#print "\nOK, done!\n";
#
## FIXME: don't just sleep... figure out if the app is up yet.
#print "\n--Sleeping for 3 minutes--\n";
#sleep 180;
#
## Populate the metadata block field values, create users
## and dataverses:
#
#unless ( -d "data" && -f "setup-datasetfields.sh" && -f "setup-users.sh" && -f "setup-dvs.sh" && -f "setup-all.sh" ) {
#    chdir("../api");
#}
#
#unless ( -d "data" && -f "setup-datasetfields.sh" && -f "setup-users.sh" && -f "setup-dvs.sh" && -f "setup-builtin-roles.sh" && -f "setup-all.sh" ) {
#    print "\nERROR: Can't find the metadata and user/dataverse setup scripts!\n";
#    print "\tAre you running the installer in the right directory?\n";
#    exit 1;
#}
#
#for my $script ( "setup-all.sh" ) {
#    print "Executing script " . $script . "...\n";
#
#    my $my_hostname = $CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'};
#
#    my $run_script;
#    #if ( $my_hostname ne "localhost" ) {
#    #    system( "sed 's/localhost:8080/$my_hostname/g' < " . $script . " > tmpscript.sh; chmod +x tmpscript.sh" );
#    #    $run_script = "tmpscript.sh";
#    #}
#    #else {
#        $run_script = $script;
#    #}
#
#    unless ( my $exit_code = system( "./" . $run_script ) == 0 ) {
#        print "\nERROR executing script " . $script . "!\n";
#        exit 1;
#    }
#    print "ok!\n";
#}
#
#chdir($cwd);
#
#print "\n\nYou should now have a running DVN instance at\n";
#print "  http://" . $CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'} . "[:8080]\n";
#
## (going to skip the Rserve check, for now)
#
#exit 0;
#
## 9. FINALLY, CHECK IF RSERVE IS RUNNING:
#print "\n\nFinally, checking if Rserve is running and accessible...\n";
#
#unless ( $CONFIG_DEFAULTS{'RSERVE_PORT'} =~ /^[0-9][0-9]*$/ ) {
#    print $CONFIG_DEFAULTS{'RSERVE_HOST'} . " does not look like a valid port number,\n";
#    print "defaulting to 6311.\n\n";
#
#    $CONFIG_DEFAULTS{'RSERVE_PORT'} = 6311;
#}
#
#my ( $rserve_iaddr, $rserve_paddr, $rserve_proto );
#
#unless ( $rserve_iaddr = inet_aton( $CONFIG_DEFAULTS{'RSERVE_HOST'} ) ) {
#    print STDERR "Could not look up $CONFIG_DEFAULTS{'RSERVE_HOST'},\n";
#    print STDERR "the host you specified as your R server.\n";
#    print STDERR "\nDVN can function without a working R server, but\n";
#    print STDERR "much of the functionality concerning running statistics\n";
#    print STDERR "and analysis on quantitative data will not be available.\n";
#    print STDERR "Please consult the Installers guide for more info.\n";
#
#    exit 0;
#}
#
#$rserve_paddr = sockaddr_in( $CONFIG_DEFAULTS{'RSERVE_PORT'}, $rserve_iaddr );
#$rserve_proto = getprotobyname('tcp');
#
#unless ( socket( SOCK, PF_INET, SOCK_STREAM, $rserve_proto )
#    && connect( SOCK, $rserve_paddr ) )
#{
#    print STDERR "Could not establish connection to $CONFIG_DEFAULTS{'RSERVE_HOST'}\n";
#    print STDERR "on port $CONFIG_DEFAULTS{'RSERVE_PORT'}, the address you provided\n";
#    print STDERR "for your R server.\n";
#    print STDERR "DVN can function without a working R server, but\n";
##    print STDERR "much of the functionality concerning running statistics\n";
#    print STDERR "and analysis on quantitative data will not be available.\n";
#    print STDERR "Please consult the \"Installing R\" section in the Installers guide\n";
#    print STDERR "for more info.\n";
#
#    exit 0;
#
#}
#
#close(SOCK);
#print "\nOK!\n";
#
sub setup_glassfish {
    my $success = 1;
    my $failure = 0;

    # We are going to run a standalone shell script with a bunch of asadmin
    # commands to set up all the glassfish components for the application.
    # All the parameters must be passed to that script as environmental
    # variables:

    $ENV{'GLASSFISH_ROOT'}   = $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'};
    $ENV{'GLASSFISH_DOMAIN'} = "domain1";
    $ENV{'ASADMIN_OPTS'}     = "";
    $ENV{'MEM_HEAP_SIZE'}    = $CONFIG_DEFAULTS{'DEF_MEM_SIZE'};

    $ENV{'DB_PORT'} = $CONFIG_DEFAULTS{'POSTGRES_PORT'};
    $ENV{'DB_HOST'} = $CONFIG_DEFAULTS{'POSTGRES_SERVER'};
    $ENV{'DB_NAME'} = $CONFIG_DEFAULTS{'POSTGRES_DATABASE'};
    $ENV{'DB_USER'} = $CONFIG_DEFAULTS{'POSTGRES_USER'};
    $ENV{'DB_PASS'} = $CONFIG_DEFAULTS{'POSTGRES_PASSWORD'};

    $ENV{'RSERVE_HOST'} = $CONFIG_DEFAULTS{'RSERVE_HOST'};
    $ENV{'RSERVE_PORT'} = $CONFIG_DEFAULTS{'RSERVE_PORT'};
    $ENV{'RSERVE_USER'} = $CONFIG_DEFAULTS{'RSERVE_USER'};
    $ENV{'RSERVE_PASS'} = $CONFIG_DEFAULTS{'RSERVE_PASSWORD'};

    $ENV{'HOST_ADDRESS'} = $CONFIG_DEFAULTS{'HOST_DNS_ADDRESS'};
    $ENV{'SMTP_SERVER'}  = $CONFIG_DEFAULTS{'MAIL_SERVER'};
    $ENV{'FILES_DIR'} =
      $CONFIG_DEFAULTS{'GLASSFISH_DIRECTORY'} . "/glassfish/domains/" . $ENV{'GLASSFISH_DOMAIN'} . "/files";

    system("./glassfish-setup.sh");

    if ($?) {
        return $failure;
    }
    return $success;
}

sub create_pg_hash {
    my $pg_username = shift @_;
    my $pg_password = shift @_;

    my $encode_line = $pg_password . $pg_username;

    # for Redhat:


    my $hash = `/bin/echo -n $encode_line | md5sum`;

    chop $hash;

    $hash =~ s/  \-$//;

    if ( ( length($hash) != 32 ) || ( $hash !~ /^[0-9a-f]*$/ ) ) {
        print STDERR "Failed to generate a MD5-encrypted password hash for the Postgres database.\n";
        exit 1;
    }

    return $hash;
}
