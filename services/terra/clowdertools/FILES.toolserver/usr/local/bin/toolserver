#!/usr/bin/python

import os, json
from flask import Flask
from flask.ext import restful
from flask_restful import reqparse, abort, Api, Resource

app = Flask(__name__)
api = restful.Api(app)

post_parser = reqparse.RequestParser()
post_parser.add_argument('dataset') # Clowder download path e.g. "http://0.0.0.0:9000/clowder/api/datasets/<ds_id>/download"
post_parser.add_argument('key') # Clowder key
post_parser.add_argument('host') # This host name, for formulating response

del_parser = reqparse.RequestParser()
del_parser.add_argument('id') # toolContainer ID

put_parser = reqparse.RequestParser()
put_parser.add_argument('id') # toolContainer ID
put_parser.add_argument('dataset') # Clowder download path e.g. "http://0.0.0.0:9000/clowder/api/datasets/<ds_id>/download"
put_parser.add_argument('key') # Clowder key


#
# Allow remote user to get contents of toolserver logs
#
class DockerLog(restful.Resource):

    def get(self):
        cmd = '/usr/bin/docker logs toolserver'
        logtext = os.popen(cmd).read().rstrip()
        return logtext, 201

#
# Get list of eligible tool endpoints to call with /tools/<endpoint>
#
class ToolIndex(restful.Resource):

    def get(self):
        tools = {}
        for n in config.keys():
            tools[n] = {
                "name": config[n]["toolName"],
                "description": config[n]["description"]
            }

        return tools, 201

#
# Main class for tools, pulling necessary config vars from toolconfig.json
#
class ToolResource(restful.Resource):

    def get(self, toolName):
        return {}

    def delete(self, toolName):
        args = del_parser.parse_args()

        # Remove container
        cmd = 'docker rm -f -v '+str(args['id'])
        res = os.popen(cmd).read().rstrip()
        print "DELETING "+cmd+" RETURNS: ", res
        return 204

    def post(self, toolName):
        args = post_parser.parse_args()

        # Create the tool container
        toolCmd = "/usr/bin/docker create -P -v "+config[toolName]['dataPath']+"/data "+config[toolName]['dockerSrc']
        containerID = os.popen(toolCmd).read().rstrip()
        print "CONTAINER ID: ", containerID

        # Do data transfer container in another container
        xferCmd = '/usr/bin/docker run --rm -i --volumes-from '+containerID+' maxzilla2/toolserver:develop /usr/local/bin/clowder-xfer '+str(args['dataset'])+' '+str(args['key'])+' '+config[toolName]['dataPath']
        dataContainer = os.popen(xferCmd).read().rstrip()
        print "TRANSFER CONTAINER: ", dataContainer

        # Start the tool
        startCmd = '/usr/bin/docker start '+containerID
        dataContainer = os.popen(startCmd).read().rstrip()
        print "TOOL ID: " + dataContainer

        # Get and remap port for tool
        portCmd = "/usr/bin/docker inspect --format '{{(index (index .NetworkSettings.Ports \""+config[toolName]['mappedPort']+"\") 0).HostPort}}' "+containerID
        port = os.popen(portCmd).read().rstrip()
        print 'ON PORT ' + port

        # return URL and containerID
        ret = {
            'id': containerID,
            'URL': args['host']+":"+port
        }
        return ret, 201

    def put(self, toolName):
        args = put_parser.parse_args()

        # Do data transfer container in another container
        xferCmd = '/usr/bin/docker run --rm -i --volumes-from '+str(args['id'])+' maxzilla2/toolserver:develop /usr/local/bin/clowder-xfer '+str(args['dataset'])+' '+str(args['key'])+' '+config[toolName]['dataPath']
        dataContainer = os.popen(xferCmd).read().rstrip()
        print "TRANSFER CONTAINER: ", dataContainer

        return 204

"""
Get configured tools from config file
    Should be a list of definition objects like so:
    [
        "apiPath": {
            "toolName"      Human-readable name of the tool, e.g. to display in selection menus.
            "description"   Brief description of tool for users.
            "dockerSrc"    Container source on dockerhub.
            "dataPath"     Path where uploaded datasets will be downloaded.
            "mappedPort"    This is used to map ports for containers of this type using docker inspect.
        },
        {...},
        {...}
    ]
"""
confFile = open("/usr/local/bin/toolconfig.json")
config = json.load(confFile)
confFile.close()

# Define endpoints
api.add_resource(ToolIndex, '/tools/list')
api.add_resource(ToolResource, '/tools/<string:toolName>')
api.add_resource(DockerLog, '/logs')

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int("8080"), debug=True)
