#!/usr/bin/python

import os, json
from flask import Flask
from flask.ext import restful
from flask_restful import reqparse, abort, Api, Resource

app = Flask(__name__)
api = restful.Api(app)

post_parser = reqparse.RequestParser()
post_parser.add_argument('dataset') # Clowder download path e.g. "http://0.0.0.0:9000/clowder/api/datasets/<ds_id>/download"
post_parser.add_argument('key') # Clowder key
post_parser.add_argument('host') # This host name, for formulating response

del_parser = reqparse.RequestParser()
del_parser.add_argument('id') # toolContainer ID

put_parser = reqparse.RequestParser()
put_parser.add_argument('id') # toolContainer ID
put_parser.add_argument('dataset') # Clowder download path e.g. "http://0.0.0.0:9000/clowder/api/datasets/<ds_id>/download"
put_parser.add_argument('key') # Clowder key

class DockerLog(restful.Resource):

    def get(self):
        cmd = '/usr/bin/docker logs toolserver'
        logtext = os.popen(cmd).read().rstrip()
        return logtext, 201

class ToolResource(restful.Resource):

    def __init__(self, config):
        self.name = config['name']
        self.apiPath = config['apiPath']
        self.description = config['description']
        self.dockerSrc = config['dockerSrc']
        self.dataPath = config['dataPath']
        self.mappedPort = config['mappedPort']

    def get(self):
        return {}

    def delete(self):
        args = del_parser.parse_args()

        # Remove container
        cmd = 'docker rm -f -v '+str(args['id'])
        res = os.popen(cmd).read().rstrip()
        print "DELETING "+cmd+" RETURNS: ", res
        return 'OK', 204

    def post(self):
        args = post_parser.parse_args()

        # Create the tool container
        toolCmd = "/usr/bin/docker create -P -v "+self.dataPath+" "+self.dockerSrc
        containerID = os.popen(toolCmd).read().rstrip()
        print "CONTAINER ID: ", containerID

        # Do data transfer container in another container
        xferCmd = '/usr/bin/docker run --rm -i --volumes-from '+containerID+' maxzilla2/toolserver:develop /usr/local/bin/clowder-xfer '+str(args['dataset'])+' '+str(args['key'])+' '+self.dataPath
        dataContainer = os.popen(xferCmd).read().rstrip()
        print "TRANSFER CONTAINER: ", dataContainer

        # Start the tool
        startCmd = '/usr/bin/docker start '+containerID
        dataContainer = os.popen(startCmd).read().rstrip()
        print "TOOL ID: " + dataContainer

        # Get and remap port for tool
        portCmd = "/usr/bin/docker inspect --format '{{(index (index .NetworkSettings.Ports \""+self.mappedPort+"\") 0).HostPort}}' "+containerID
        port = os.popen(portCmd).read().rstrip()
        print 'ON PORT ' + port

        # return URL and containerID
        ret = {
            'id': containerID,
            'URL': args['host']+":"+port
        }
        return ret, 201

    def put(self):
        args = put_parser.parse_args()

        # Do data transfer container in another container
        xferCmd = '/usr/bin/docker run --rm -i --volumes-from '+str(args['id'])+' maxzilla2/toolserver:develop /usr/local/bin/clowder-xfer '+str(args['dataset'])+' '+str(args['key'])+' '+self.dataPath
        dataContainer = os.popen(xferCmd).read().rstrip()
        print "TRANSFER CONTAINER: ", dataContainer

        return '', 201

"""
Get configured tools from config file
    Should be a list of definition objects like so:
    [
        {
            "name"          Human-readable name of the tool, e.g. to display in selection menus.
            "api_path"      Tool will be accessed via <server ip>:<port>/tools/<api_path>
            "description"   Brief description of tool for users.
            "docker_src"    Container source on dockerhub.
            "data_path"     Path where uploaded datasets will be downloaded.
            "port_remap"    This is used to map ports for containers of this type using docker inspect.
        },
        {...},
        {...}
    ]
"""
confFile = open("toolconfig.json")
jsonConfig = json.load(confFile)
confFile.close()

# Define endpoints
for conf in jsonConfig:
    api.add_resource(ToolResource, '/tools/'+conf['apiPath'], conf)
api.add_resource(DockerLog, '/logs')

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=int("8080"), debug=True)
