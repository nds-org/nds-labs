#
# Makefile infrastructure for NDSLabs
# Author: raila@illinois.edu
##############################################################
# WORK IN PROGRESS - beware
##############################################################
#
#  Usage:   TODO
#

##############################################################
# Configuration options
##############################################################
#
# BUILDDIR  - 	storage for all build things and dependency mgmt
BUILDDIR	:= nds-build

##############################################################
# 
##############################################################
#
# Using gnu make standard library: http://gmsl.sourceforge.net/
#
SELF_DIR := $(dir $(lastword $(MAKEFILE_LIST)))
include $(SELF_DIR)/gmsl

BUILDFILES		= $(IMAGES:%=Dockerfile.%)
TIMESTAMPS		= $(IMAGES:%=$(BUILDDIR)/%.d)
ORG				?= ndslabs

all: 		$(TIMESTAMPS)
.PHONY:		all clean realclean ALWAYS

$(BUILDDIR):
	@-mkdir -p $(BUILDDIR)
$(TIMESTAMPS):  |$(BUILDDIR)
$(TIMESTAMPS): $(MAKEFILE_LIST)

################################################
#
# Docker dependencies 
# 
# Pull timestamps from docker to filesystem for make
# Relies on make restart after included file changes
# in a sub-make
# Set the timestamp from the docker image build time,
# or to now-10years to force rebuild
#
-include $(BUILDDIR)/timestamps.d
ifdef DOCKER_TIMESTAMPS
$(BUILDDIR)/timestamps.d: $(BUILDDIR)
	@touch $(BUILDDIR)/timestamps.d
$(BUILDDIR)/%.d : ALWAYS $(BUILDDIR)
	@rm -f $@ && touch -d `docker inspect --format='{{ .Created }}' $* 2>/dev/null || echo "now-10years"` $@
else
.PHONY: $(BUILDDIR)/timestamps.d
$(BUILDDIR)/timestamps.d: $(BUILDDIR)
	@$(MAKE) -s DOCKER_TIMESTAMPS=true $(BUILDDIR)/timestamps.d $(TIMESTAMPS)
endif

$(BUILDDIR)/%.d : Dockerfile.% $(DEPS.%)
	@-docker rmi -f --no-prune $*   # rmi required as docker build does not update the Created metadata on new build - Docker bug
	docker build --pull $(BUILDARGS.$*:%=--build-arg %) -t $* -f $< .
	docker tag -f $* $(ORG)/$*:latest
	@touch $@


###############################################
#
# Rule and dependency template for IMAGES
#
################################################
define TEMPLATE_DEP =
 FILES.$(1) = $(shell [ -d FILES.$(1) ] && find FILES.$(1) -type f -print)
 IMAGE.$(1) : $(BUILDDIR)/$(1).d 
 $(BUILDDIR)/$(1).d: $$(DEPS.$(1)) $$(FILES.$(1)) $$(PREREQS.$(1)) Dockerfile.$(1)
endef

$(foreach p,$(IMAGES),$(eval $(call TEMPLATE_DEP,$(p))))

################################################
#
# Push to hub (does not do docker login for you) 
#
################################################
HUBPUSH = $(HUB_IMAGES:%=$(ORG)/%)
push:
	$(foreach img,$(HUBPUSH), docker push $(img))

################################################
#
# Cleanup 
#
################################################
clean: cleandir 
realclean: clean cleandocker
cleandir:
	-rm -rf $(BUILDDIR)
cleandocker:
	@-docker rmi -f $(IMAGES) || true

#
# Omit old fashioed sccs/rcs, etc searching.   Improves performance and noise on debug
#
.SUFFIXES:            # Delete unused old default suffixes
%:: RCS/%,v
%:: RCS/%
%:: s.%
%:: SCCS/s.%
%:: %,v


#
# multiline outputs to build commands
# Note 2 lines in _newline def
# use as:
# define CMDS
# 	echo this
# 	echo that
# 	...
# endef
# foo:
# 	$(call multiline $(CMDS))
#
define _newline


endef
multiline	= '$(subst $(_newline),\n,$1)'
